stages:
  - validate
  - test
  - build
  - deploy
  - cleanup

include:
  - project: hegerdes/gitlab-actions
    file: .gitlab/ci/snippets.yml
  - project: hegerdes/gitlab-actions
    file: .gitlab/ci/rules.yml
  - component: gitlab.com/components/sast/sast@main
    rules:
      - if: $SAST_DISABLED == "true"
        when: never
  - component: gitlab.com/components/secret-detection/secret-detection@main
    rules:
      - if: $SECRET_DETECTION_DISABLED == "true"
        when: never
  - component: gitlab.com/hegerdes/gitlab-actions/pre-commit@main
  - component: gitlab.com/components/opentofu/job-templates@main
    inputs:
      version: latest
      opentofu_version: 1.8.0

variables:
  GL_K8S_CONTEXT: gitlab-ci
  GL_K8S_AGENT_ID: 1103496

.tf_stacks: &tf_stacks
  - TF_ROOT: infra/k8s-ci-test
    TF_STATE_NAME: k8s-test
  - TF_ROOT: infra/hcloud-tf-ci-test
    TF_STATE_NAME: hcloud

pre-commit:
  allow_failure: true
  before_script:
    - !reference [.snippets, debian-core-tools]
    - !reference [.snippets, alpine-core-tools]
    - !reference [.snippets, terraform-install]
    - !reference [.snippets, tflint-install]

az-auth:
  image: mcr.microsoft.com/azure-cli:latest
  stage: .pre
  before_script: []
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  variables:
    AZURE_CLIENT_ID: $AZURE_ENTRA_ID_GITLAB_CI_CLIENT_ID
    AZURE_TENANT_ID: $AZURE_TENANT_ID_HEGERDES
    AZURE_KEY_VAULT_SERVER_URL: https://hegerdes.vault.azure.net
  # NOTE: Only supported on premium or ultimate
  secrets:
    DEMO_SECRET:
      token: $GITLAB_OIDC_TOKEN
      azure_key_vault:
        name: hcloud-k8s-token
  script:
    - az login --service-principal -u "${AZURE_CLIENT_ID}" -t "${AZURE_TENANT_ID}" --federated-token $GITLAB_OIDC_TOKEN
    - |
      # Setting envs
      echo "HCLOUD_TOKEN=$(az keyvault secret show --vault-name hegerdes --name hcloud-k8s-token | jq -r .value)" >> ci.env
      echo "export HCLOUD_TOKEN=$(az keyvault secret show --vault-name hegerdes --name hcloud-k8s-token | jq -r .value)" >> azure.env
  artifacts:
    expire_in: 15 min
    access: none
    paths:
      - "*.env"
    reports:
      dotenv: ci.env
  rules:
    - !reference [.rules, default-merge-rules]
    - !reference [.rules, default-branch-only-rules]

TF:fmt:
  extends: [.opentofu:fmt]
  parallel:
    matrix: *tf_stacks

TF:validate:
  extends: [.opentofu:validate]
  parallel:
    matrix: *tf_stacks

TF:plan:
  extends: [.opentofu:plan]
  allow_failure: true
  needs: [az-auth]
  parallel:
    matrix: *tf_stacks
  services:
    - name: hegerdes/kubernetes-etcd
      alias: kubernetes
  before_script:
    - !reference [.snippets, debian-core-tools]
    - !reference [.snippets, alpine-core-tools]
    - !reference [.snippets, openssl-install]
    - !reference [.snippets, kubectl-install]
    - !reference [.snippets, kubectl-gitlab-agent]
    - source *.env
    - |
      if ! kubectl cluster-info; then
        echo "Error: kubectl connection to live cluster failed! Trying dummy cluster..."
        openssl s_client -showcerts -connect kubernetes:6443 </dev/null | \
          sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > k8s-ca.cert
        kubectl config set-credentials demo --token="${KUBE_TOKEN}"
        kubectl config set-cluster dummy \
          --server=https://kubernetes:6443 \
          --certificate-authority=k8s-ca.cert \
          --embed-certs=true
        kubectl config set-context dummy-cluster --cluster=dummy --user=demo
        kubectl config use-context dummy-cluster
      fi
      kubectl cluster-info

TF:apply:
  extends: [.opentofu:apply]
  allow_failure: true
  parallel:
    matrix: *tf_stacks
  services:
    - name: hegerdes/kubernetes-etcd
      alias: kubernetes
  needs:
    - job: az-auth
    - job: TF:plan
      parallel:
        matrix: *tf_stacks
  before_script:
    - !reference [.snippets, debian-core-tools]
    - !reference [.snippets, alpine-core-tools]
    - !reference [.snippets, openssl-install]
    - !reference [.snippets, kubectl-install]
    - !reference [.snippets, kubectl-gitlab-agent]
    - source *.env
