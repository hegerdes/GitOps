---
apiVersion: talos.dev/v1alpha1
kind: ServiceAccount
metadata:
  name: talos-api-access-talos-secrets
  namespace: kube-system
spec:
  roles:
    - os:reader
    - os:etcd:backup
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: talos-etcd-backup
  namespace: kube-system
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: azure-sas
  namespace: kube-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: azure-store
  target:
    name: azure-sas
    creationPolicy: Owner

  data:
    - secretKey: url
      remoteRef:
        key: azure-sa-devblobs-kube-test-sas-backup
        decodingStrategy: None # can be None, Base64, Base64URL or Auto
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: etcd-backup
  namespace: kube-system
spec:
  schedule: "30 0 * * *"
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      activeDeadlineSeconds: 600
      parallelism: 1
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: talos-etcd-backup
          hostUsers: false
          nodeSelector:
            node-role.kubernetes.io/control-plane: ""
          containers:
            - name: talos-api-access
              resources: {}
              image: alpine:3
              command:
                - sh
                - -c
                - apk add kubectl curl bash jq && bash /var/scripts/talosctl-etcd-backup.sh
              env:
                - name: CP_NODE
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: AZURE_SAS_URL
                  valueFrom:
                    secretKeyRef:
                      name: azure-sas
                      key: url
                      optional: true
                - name: S3_ENDPOINT_URL
                  valueFrom:
                    secretKeyRef:
                      name: aws-s3
                      key: endpoint
                      optional: true
                - name: S3_BUCKET_NAME
                  valueFrom:
                    secretKeyRef:
                      name: aws-s3
                      key: bucket
                      optional: true
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-s3
                      key: access_key_id
                      optional: true
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-s3
                      key: secret_access_key
                      optional: true
              volumeMounts:
                - mountPath: /var/run/secrets/talos.dev
                  name: talos-secrets
                - mountPath: /var/scripts
                  name: talos-scripts
          tolerations:
            - operator: Exists
              key: node-role.kubernetes.io/control-plane
          volumes:
            - name: talos-secrets
              secret:
                secretName: talos-api-access-talos-secrets
            - name: talos-scripts
              configMap:
                name: talos-scripts
                defaultMode: 0555
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: talos-scripts
  namespace: kube-system # Change this to the appropriate namespace if needed
data:
  talosctl-etcd-backup.sh: |
    #!/bin/bash
    set -e

    BACKUP_DIR=${BACKUP_DIR:-"/tmp"}
    CLUSTER_NAME=${CLUSTER_NAME:-"talos"}
    DATETIME=$(date +"%Y-%m-%d-%H-%M-%S")
    BACKUP_NAME="${CLUSTER_NAME}-etcd-${DATETIME}.db"
    SCRIPT_PATH=$(dirname $(realpath $0))

    CP_NODE=${CP_NODE:-"10.0.1.8"}
    if ! command -v talosctl >/dev/null; then
        bash $SCRIPT_PATH/install-talosctl.sh
    fi

    # Check if the output contains the string "os:etcd:backup"
    output=$(talosctl config info)
    if ! echo "$output" | grep -q "os:etcd:backup"; then
      echo "Client is not configured to backup etcd. Please configure it."
      exit 1
    fi

    echo "Creating etcd snapshot on node ${CP_NODE}..."
    talosctl etcd snapshot "${BACKUP_DIR}/${BACKUP_NAME}" -n $CP_NODE

    # Check if the ENV AZURE_SAS_URL is set
    if [ ! -z "$AZURE_SAS_URL" ]; then
      if ! command -v azcopy >/dev/null; then
        bash $SCRIPT_PATH/az-copy-install.sh
      fi
      azcopy copy "${BACKUP_DIR}/${BACKUP_NAME}" "${AZURE_SAS_URL}"
    fi

    # Check if the ENV S3_ENDPOINT_URL is set
    if [ ! -z "$S3_ENDPOINT_URL" ]; then
      if [ -z "$S3_BUCKET_NAME" ]; then
        echo "S3_BUCKET_NAME is not set."
        exit 1
      fi
      if ! command -v mc >/dev/null; then
        bash $SCRIPT_PATH/minio-mc-install.sh
      fi
      mc alias set btk $S3_ENDPOINT_URL $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
      mc cp --json "${BACKUP_DIR}/${BACKUP_NAME}" "btk/${S3_BUCKET_NAME}/"
    fi
  install-talosctl.sh: |
    # Check if talosctl is installed
    if ! command -v talosctl > /dev/null; then
      echo "Installing talosctl"
      echo "You can set the desired version via TALOSCTL_VERSION. Default is latest"
      if [ "$(uname -m)" = "x86_64" ]; then
        ARCH=amd64
      elif [ "$(uname -m)" = "aarch64" ]; then
        ARCH=arm64
      else
        echo "Unknown system arch. Default to amd64"
      fi
      TALOSCTL_DEFAULT_VERSION=$(curl -sL https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name)
      TALOSCTL_VERSION=${TALOSCTL_VERSION-$TALOSCTL_DEFAULT_VERSION}
      curl -sL https://github.com/siderolabs/talos/releases/download/${TALOSCTL_VERSION}/talosctl-linux-${ARCH-amd64} -o /usr/local/bin/talosctl
      chmod +x /usr/local/bin/talosctl
    fi
    talosctl version --client
  minio-mc-install.sh: |
    # Check if minio mc is installed
    if ! command -v mc > /dev/null; then
      echo "Installing minio mc"
      if [ "$(uname -m)" = "x86_64" ]; then
        ARCH=amd64
      elif [ "$(uname -m)" = "aarch64" ]; then
        ARCH=arm64
      else
        echo "Unknown system arch. Default to amd64"
      fi
      curl -sL https://dl.min.io/client/mc/release/linux-${ARCH-amd64}/mc -o /usr/local/bin/mc
      chmod +x /usr/local/bin/mc
    fi
    mc --version
  az-copy-install.sh: |
    # Check if azcopy is installed
    if ! command -v azcopy > /dev/null; then
      echo "Installing azcopy"
      if [ "$(uname -m)" = "aarch64" ]; then
        ARCH="-arm64"
      fi
      if command -v apk > /dev/null; then
        apk add --no-cache libc6-compat > /dev/null
      fi
      curl -sL https://aka.ms/downloadazcopy-v10-linux${ARCH} -o az-copy.tar
      tar -xf az-copy.tar --strip-components=1 -C /usr/local/bin/
    fi
    azcopy --version


# wget -O /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/download/v1.9.1/talosctl-linux-amd64
# wget -O /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/download/v1.9.1/talosctl-linux-arm64
# chmod +x /usr/local/bin/talosctl
---

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: talos-conf-manger
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: talos-machine-conf-manager
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    # resourceNames: ["talos-machine-conf"]
    verbs: ["create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: talos-machine-conf-manager-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: talos-conf-manger
    namespace: kube-system
roleRef:
  kind: Role
  name: talos-machine-conf-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: talos-api-access
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: talos-api-access
  template:
    metadata:
      labels:
        app: talos-api-access
    spec:
      serviceAccountName: talos-conf-manger
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      containers:
        - name: talos-api-access
          resources: {}
          terminationMessagePolicy: FallbackToLogsOnError
          image: alpine:3
          command:
            - sh
            - -c
            - apk add kubectl curl bash jq && while true; do sleep 7d; done
          env:
            - name: CP_NODE
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: AZURE_SAS_URL
              valueFrom:
                secretKeyRef:
                  name: azure-sas
                  key: url
          volumeMounts:
            - mountPath: /var/run/secrets/talos.dev
              name: talos-secrets
            - mountPath: /var/scripts
              name: talos-scripts
      tolerations:
        - operator: Exists
          key: node-role.kubernetes.io/control-plane
      volumes:
        - name: talos-secrets
          secret:
            secretName: talos-api-access-talos-secrets
        - name: talos-scripts
          configMap:
            name: talos-scripts
            defaultMode: 0555
